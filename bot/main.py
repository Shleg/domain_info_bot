from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
import asyncio

from config import BOT_TOKEN
from db.db import init_db
from db.models import Domain
from db.db import SessionLocal
from bot.utils import is_valid_domain
from bot.utils import check_http_https
from bot.utils import check_ssl

from config import ALLOWED_USER_IDS

def is_authorized(user_id: int) -> bool:
    return user_id in ALLOWED_USER_IDS

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()


# –•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    if not is_authorized(message.from_user.id):
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Å–ª–µ–∂—É –∑–∞ —Å–∞–π—Ç–∞–º–∏. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –¥–æ–º–µ–Ω, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.")


@dp.message(F.text.startswith("/add"))
async def add_domain_handler(message: Message):
    if not is_authorized(message.from_user.id):
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    parts = message.text.strip().split()

    if len(parts) != 2:
        await message.answer("‚ö†Ô∏è –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/add example.com</code>")
        return

    domain = parts[1].strip().lower()

    if not is_valid_domain(domain):
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ–µ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è.")
        return

    async with SessionLocal() as session:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –¥–æ–º–µ–Ω
        existing = await session.execute(
            Domain.__table__.select().where(Domain.name == domain)
        )
        result = existing.fetchone()

        if result:
            await message.answer("‚ÑπÔ∏è –≠—Ç–æ—Ç –¥–æ–º–µ–Ω —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.")
            return

        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
        new_domain = Domain(
            name=domain,
            user_id=message.from_user.id
        )

        session.add(new_domain)
        await session.commit()

        await message.answer(f"‚úÖ –î–æ–º–µ–Ω <b>{domain}</b> –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.")


@dp.message(F.text == "/list")
async def list_domains_handler(message: Message):
    async with SessionLocal() as session:
        if not is_authorized(message.from_user.id):
            await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return

        result = await session.execute(Domain.__table__.select())
        domains = result.fetchall()

        if not domains:
            await message.answer("üîç –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–º–µ–Ω–æ–≤.")
            return

        text = "üìù –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –¥–æ–º–µ–Ω–æ–≤:\n"
        for row in domains:
            text += f"‚Ä¢ {row.name}\n"

        await message.answer(text)


@dp.message(F.text.startswith("/check"))
async def check_domain_handler(message: Message):
    if not is_authorized(message.from_user.id):
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    parts = message.text.strip().split()
    if len(parts) != 2:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: <code>/check example.com</code>")
        return

    domain = parts[1].strip().lower()
    await message.answer(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é <b>{domain}</b>...")

    results = await check_http_https(domain)

    reply = f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ <b>{domain}</b>:\n"
    for proto in ["http", "https"]:
        res = results.get(proto)
        if res["status"] == "ok":
            reply += f"‚Ä¢ <b>{proto.upper()}</b>: ‚úÖ {res['code']}\n"
        else:
            reply += f"‚Ä¢ <b>{proto.upper()}</b>: ‚ùå {res['error']}\n"

    ssl_result = check_ssl(domain)
    reply += "\nüîê <b>SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç:</b>\n"
    if ssl_result["valid"]:
        reply += (
            f"‚Ä¢ –ò–∑–¥–∞—Ç–µ–ª—å: {ssl_result['issuer']}\n"
            f"‚Ä¢ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {ssl_result['expires_at']}\n"
            f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {ssl_result['days_left']}\n"
        )
    else:
        reply += f"‚Ä¢ ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL: {ssl_result['error']}\n"

    await message.answer(reply)


async def main():
    await init_db()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
