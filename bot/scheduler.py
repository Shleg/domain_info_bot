from apscheduler.schedulers.asyncio import AsyncIOScheduler
from db.db import SessionLocal
from db.models import Domain
from bot.utils import check_http_https, check_ssl, check_domain_expiry
from aiogram import Bot
from config import BOT_TOKEN

scheduler = AsyncIOScheduler()
bot = Bot(token=BOT_TOKEN)

async def check_all_domains():
    async with SessionLocal() as session:
        result = await session.execute(Domain.__table__.select())
        domains = result.fetchall()

        for row in domains:
            domain = row.name
            user_id = row.user_id
            try:
                http_result = await check_http_https(domain)
                ssl_result = check_ssl(domain)
                whois_result = check_domain_expiry(domain)

                problems = []

                # HTTP/HTTPS –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                for proto in ["http", "https"]:
                    if http_result.get(proto, {}).get("status") != "ok":
                        problems.append(f"{proto.upper()} ‚ùå ({http_result[proto].get('error', '–æ—à–∏–±–∫–∞')})")

                # SSL
                if not ssl_result["valid"] or ssl_result.get("days_left", 0) < 30:
                    problems.append("SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç ‚ö†Ô∏è")

                # WHOIS
                if not whois_result["valid"] or whois_result.get("days_left", 0) < 30:
                    problems.append("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–º–µ–Ω–∞ ‚ö†Ô∏è")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
                if problems:
                    text = f"üö® –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ–º–µ–Ω–æ–º <b>{domain}</b>:\n" + "\n".join(f"‚Ä¢ {p}" for p in problems)
                    await bot.send_message(user_id, text)
            except Exception as e:
                await bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {domain}: {str(e)}")